// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id               Int      @id @default(autoincrement())
  username         String
  email            String   @unique
  password         String 
  profile          Profile?
  kegiatan         Kegiatan[]
  notifications    Notification[]
  posts            Post[]
  postLikes        PostLike[]
  postUnlikes      PostDislike[]
  comments         Comment[]
  CommentLike      CommentLike[]
  reply            Reply[]
  replyLike        ReplyLike[]
  peminjaman       Peminjaman[]
  commentBook      CommentBook[]
  isVerified       Boolean  @default(false)
  verificationCode String?
  deleteAccountVerficationCode String? 
  deleteReason     String?  @db.Text
  isActive         Boolean @default(true)
  fcmToken         String?
  totalScoreYear   Int?     @default(0)
  totalScoreMonth  Int?     @default(0)
  totalScoreDay    Int?     @default(0)
  role             Role?    @default(USER)
}

model Profile {
  id                Int      @id @default(autoincrement())
  nama              String?
  bio               String?
  photo             String?
  namaIstri         String?  
  namaKuttab        String?
  namaAnak          String?
  tahunMasukKuttab  Int?
  user   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int                 @unique
}

model Kegiatan {
  id        Int      @id @default(autoincrement())
  title     String
  file1     String?
  file2     String?
  file3     String?
  userId    Int
  score     Int?     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id        Int     @id @default(autoincrement())
  question  String  @db.Text
  answer    String? @db.Text
  isAnswer  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int       @id @default(autoincrement())
  title     String 
  body      String   
  data      Json
  userId    Int
  imageUrl  String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model News {
  id        Int       @id @default(autoincrement())
  title     String
  subTitle  String
  author    String
  imageUrl  String?
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id          Int           @id @default(autoincrement())
  userId      Int 
  body        String        @db.Text
  postLikes   PostLike[]
  postDislikes PostDislike[]
  comments    Comment[]
  createdAt   DateTime       @default(now())
  updateAt    DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostLike {
  id          Int         @id @default(autoincrement())
  userId      Int
  postId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostDislike {
  id          Int         @id @default(autoincrement())
  userId      Int
  postId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id          Int   @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  body        String      @db.Text
  postId      Int
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentLikes  CommentLike[]
  replies      Reply[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CommentLike {
  id          Int         @id @default(autoincrement())
  userId      Int
  commentId   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment     Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Reply {
  id          Int   @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  body        String      @db.Text
  commentId   Int
  comment     Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  replyLikes  ReplyLike[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ReplyLike {
  id          Int @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyId     Int
  reply       Reply       @relation(fields: [replyId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model userDeleted {
  id                       Int      @id @default(autoincrement())
  email                    String
  deleteReason             String?  @db.Text
  deletedAt                DateTime @default(now()) 
}


model Book {
  id  Int @id @default(autoincrement())
  name String
  description String @db.Text
  stock Int
  imageurl String
  categories BookCategories[]
  peminjaman Peminjaman[]
  comment_book CommentBook[]
}


model CommentBook {
  user User @relation(fields: [userId], references: [id])
  userId Int
  book Book @relation(fields: [bookId], references: [id])
  bookId Int
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, bookId])
}
enum Status {
  SUDAH_DIKEMBALIKAN
  SUDAH_DIAMBIL
  TIDAK_JADI
  PENDING
}

model  Peminjaman {
  book Book @relation(fields: [bookId], references: [id])
  bookId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  status Status
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())

  @@id([bookId, userId])
}

model Category {
  id Int @id @default(autoincrement())
  name String
  books BookCategories[]
}

model BookCategories {
  book Book @relation(fields: [bookId], references: [id])
  bookId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  @@id([categoryId, bookId])
}


model ErrorLog {
  id          Int       @id @default(autoincrement())
  errorMessage String    @db.Text
  stackTrace  String?   @db.Text
  createdAt   DateTime  @default(now())
}